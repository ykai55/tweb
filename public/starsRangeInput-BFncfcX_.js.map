{"version":3,"file":"starsRangeInput-BFncfcX_.js","sources":["../src/components/sidebarLeft/tabs/privacy/messages/useAppConfig.ts","../src/components/sidebarLeft/tabs/privacy/messages/useStarsCommissionAndWithdrawalPrice.ts","../src/components/sidebarLeft/tabs/privacy/messages/starsRangeInput.tsx"],"sourcesContent":["import {createResource} from 'solid-js';\n\nimport {useHotReloadGuard} from '../../../../../lib/solidjs/hotReloadGuard';\n\nimport {usePromiseCollector} from '../../solidJsTabs/promiseCollector';\n\n\nconst useAppConfig = () => {\n  const {rootScope} = useHotReloadGuard();\n  const promiseCollector = usePromiseCollector();\n\n  return createResource(() => {\n    const promise = rootScope.managers.apiManager.getAppConfig();\n    promiseCollector.collect(promise);\n    return promise;\n  });\n};\n\nexport default useAppConfig;\n","import {Accessor, createMemo} from 'solid-js';\n\nimport useAppConfig from './useAppConfig';\n\n\nconst useStarsCommissionAndWithdrawalPrice = (stars: Accessor<number>) => {\n  const [appConfig] = useAppConfig();\n\n  const commission = createMemo(() => (+appConfig()?.stars_paid_message_commission_permille || 0) / 1000);\n  const centsPerStar = createMemo(() => (+appConfig()?.stars_usd_withdraw_rate_x1000 || 0) / 1000);\n\n  const commissionPercents = createMemo(() => Math.round(commission() * 100));\n  const willReceiveDollars = createMemo(() => Math.max(0.01, Math.round(commission() * centsPerStar() * stars()) / 100));\n\n  return {\n    commissionPercents,\n    willReceiveDollars\n  }\n};\n\nexport default useStarsCommissionAndWithdrawalPrice;\n","import {Component} from 'solid-js';\n\nimport {numberThousandSplitterForStars} from '../../../../../helpers/number/numberThousandSplitter';\nimport accumulate from '../../../../../helpers/array/accumulate';\nimport clamp from '../../../../../helpers/number/clamp';\nimport nMap from '../../../../../helpers/number/nMap';\nimport {i18n} from '../../../../../lib/langPack';\n\nimport styles from './starsRangeInput.module.scss';\n\n\nconst starsPerUnits: [units: number, stars: number][] = [\n  [10, 1], // 1 star per unit until 10\n  [10, 2], // 2 stars per unit until 30\n  [14, 5], // 5 stars per unit until 100\n  [10, 10], // 10 stars per unit until 200\n  [12, 25], // 25 stars per unit until 500\n  [10, 50], // 50 stars per unit until 1.000\n  [15, 100], // 100 stars per unit until 2.500\n  [20, 250], // 250 stars per unit until 7.500\n  [5, 500] // 500 stars per unit until 10.000\n]; // 106 total units, try to be something close to 100\n\nconst totalUnits = accumulate(starsPerUnits.map(v => v[0]), 0);\nconst totalStars = unitsToStars(totalUnits);\n\nfunction unitsToStars(units: number) {\n  let stars = 0;\n\n  for(const [u, s] of starsPerUnits) {\n    stars += Math.min(units, u) * s;\n    units -= u;\n\n    if(units <= 0) break;\n  }\n\n  return stars;\n}\n\nfunction starsToUnits(stars: number) {\n  let units = 0;\n\n  for(const [u, s] of starsPerUnits) {\n    const v = Math.min(u, Math.floor(stars / s));\n\n    stars -= v * s;\n    units += v;\n  }\n\n  return units;\n}\n\nconst StarRangeInput: Component<{\n  value: number;\n  onChange: (value: number) => void;\n}> = (props) => {\n  const units = () => clamp(starsToUnits(props.value), 1, totalUnits);\n\n  const normalizedValue = () => nMap(units(), 1, totalUnits, 0, 1);\n\n  const onInput = (e: InputEvent & { currentTarget: HTMLInputElement }) => {\n    const clampedValue = clamp(e.currentTarget.valueAsNumber, 1, totalUnits)\n    const newValue = Math.round(unitsToStars(clampedValue));\n\n    props.onChange(newValue);\n  }\n\n  return (\n    <div\n      class={styles.Container}\n      style={{\n        '--normalized': normalizedValue(),\n        '--w': normalizedValue() * 100 + '%'\n      }}\n    >\n      <div class={styles.Row}>\n        <div class={styles.Limit}>1</div>\n        <div class={styles.Value}>{i18n('Stars', [\n          numberThousandSplitterForStars(parseInt(props.value.toFixed(0)))\n        ])}</div>\n        <div class={`${styles.Limit} ${styles.LimitLast}`}>{numberThousandSplitterForStars(totalStars)}</div>\n      </div>\n      <div class={styles.InputWrapper}>\n        <input\n          type=\"range\"\n          min={1}\n          max={totalUnits}\n          step={1}\n          value={units()}\n          onInput={onInput}\n        />\n        <div class={styles.Background} />\n        <div class={styles.Thumb} />\n        <div class={styles.Progress} />\n      </div>\n    </div>\n  );\n}\n\nexport default StarRangeInput;\n\n\n/*\n// Snippet to adjust stars per unit\n\nlet a = [\n  [10, 1],\n  [10, 2],\n  [14, 5],\n  [10, 10],\n  [12, 25],\n  [10, 50],\n  [15, 100],\n  [20, 250],\n  [5, 500]\n]\n\nlet c = 0;\nlet tu = 0;\nfor (const [u, s] of a) {\n  c += u * s;\n  tu += u;\n  console.log('tu, s, c', tu, s, c);\n}\n*/\n"],"names":["useAppConfig","rootScope","useHotReloadGuard","promiseCollector","usePromiseCollector","createResource","promise","useStarsCommissionAndWithdrawalPrice","stars","appConfig","commission","createMemo","centsPerStar","commissionPercents","willReceiveDollars","starsPerUnits","totalUnits","accumulate","map","v","totalStars","unitsToStars","units","u","s","Math","min","starsToUnits","floor","StarRangeInput","props","clamp","value","normalizedValue","nMap","onInput","e","clampedValue","currentTarget","valueAsNumber","newValue","round","onChange","_el$","_tmpl$","_el$2","firstChild","_el$3","_el$4","nextSibling","_el$5","_el$6","_el$7","_el$8","_el$9","_el$10","_$insert","i18n","numberThousandSplitterForStars","parseInt","toFixed","$$input","_$setAttribute","_$effect","_p$","_v$","styles","Container","_v$2","_v$3","_v$4","Row","_v$5","Limit","_v$6","Value","_v$7","LimitLast","_v$8","InputWrapper","_v$9","Background","_v$10","Thumb","_v$11","Progress","_$className","style","setProperty","removeProperty","undefined","_$delegateEvents"],"mappings":"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"}
{"version":3,"file":"actions-D670Kz1h.js","sources":["../src/lib/passcode/constants.ts","../src/helpers/bytes/compareUint8Arrays.ts","../src/lib/passcode/utils.ts","../src/lib/passcode/actions.ts"],"sourcesContent":["export const MAX_PASSCODE_LENGTH = 12;\nexport const SALT_LENGTH = 16;\n","export default function compareUint8Arrays(arr1: Uint8Array, arr2: Uint8Array) {\n  return arr1.length === arr2.length && arr1.every((value, index) => value === arr2[index]);\n}\n","import {SALT_LENGTH} from './constants';\n\nconst ITERATIONS = 100000;\n\nexport async function hashPasscode(passcode: string, salt: Uint8Array) {\n  const encoder = new TextEncoder();\n  const passcodeBytes = encoder.encode(passcode);\n  passcode = '';\n\n  const importedKey = await crypto.subtle.importKey('raw', passcodeBytes, {name: 'PBKDF2'}, false, ['deriveBits']);\n\n  const derivedBits = await crypto.subtle.deriveBits(\n    {name: 'PBKDF2', salt, iterations: ITERATIONS, hash: 'SHA-256'},\n    importedKey,\n    256\n  );\n\n  return new Uint8Array(derivedBits);\n}\n\nexport async function deriveEncryptionKey(passcode: string, salt: Uint8Array): Promise<CryptoKey> {\n  const encoder = new TextEncoder();\n  const passcodeBytes = encoder.encode(passcode);\n  passcode = '';\n\n  const importedKey = await crypto.subtle.importKey(\n    'raw', passcodeBytes, {name: 'PBKDF2'}, false, ['deriveKey']\n  );\n\n  return crypto.subtle.deriveKey(\n    {name: 'PBKDF2', salt, iterations: ITERATIONS, hash: 'SHA-256'},\n    importedKey, {name: 'AES-GCM', length: 256}, true, ['encrypt', 'decrypt']\n  );\n}\n\nexport async function createEncryptionArtifactsForPasscode(passcode: string) {\n  const encryptionSalt = crypto.getRandomValues(new Uint8Array(SALT_LENGTH));\n  const verificationSalt = crypto.getRandomValues(new Uint8Array(SALT_LENGTH));\n\n  const encryptionKey = await deriveEncryptionKey(passcode, encryptionSalt);\n  const verificationHash = await hashPasscode(passcode, verificationSalt);\n  passcode = '';\n\n  return {verificationHash, verificationSalt, encryptionSalt, encryptionKey};\n}\n","import compareUint8Arrays from '../../helpers/bytes/compareUint8Arrays';\nimport {joinDeepPath} from '../../helpers/object/setDeepProperty';\n\nimport AccountController from '../accounts/accountController';\nimport commonStateStorage from '../commonStateStorage';\nimport CacheStorageController from '../files/cacheStorage';\nimport {useLockScreenHotReloadGuard} from '../solidjs/hotReloadGuard';\n\nimport DeferredIsUsingPasscode from './deferredIsUsingPasscode';\nimport EncryptionKeyStore from './keyStore';\nimport {createEncryptionArtifactsForPasscode, deriveEncryptionKey, hashPasscode} from './utils';\n\nexport type PasscodeActions = ReturnType<typeof usePasscodeActions>;\n\nexport function usePasscodeActions() {\n  const {rootScope, apiManagerProxy} = useLockScreenHotReloadGuard();\n\n\n  async function disableCacheStorages() {\n    CacheStorageController.temporarilyToggle(false);\n    await apiManagerProxy.invoke('toggleCacheStorage', false);\n    await apiManagerProxy.serviceMessagePort.invoke('toggleCacheStorage', false);\n  }\n\n  async function enableCacheStorages() {\n    CacheStorageController.temporarilyToggle(true);\n    await apiManagerProxy.invoke('toggleCacheStorage', true);\n    await apiManagerProxy.serviceMessagePort.invoke('toggleCacheStorage', true);\n  }\n\n  async function clearCacheStorages() {\n    await CacheStorageController.clearEncryptableStorages();\n  }\n\n  async function enablePasscode(passcode: string) {\n    const {verificationHash, verificationSalt, encryptionSalt, encryptionKey} =\n      await createEncryptionArtifactsForPasscode(passcode);\n\n    passcode = ''; // forget\n\n    await commonStateStorage.set({\n      passcode: {\n        verificationHash,\n        verificationSalt,\n        encryptionSalt\n      }\n    });\n\n    await rootScope.managers.appStateManager.setByKey(joinDeepPath('settings', 'passcode', 'enabled'), true);\n\n    await disableCacheStorages();\n    await clearCacheStorages();\n\n    const togglePayload = {\n      isUsingPasscode: true,\n      encryptionKey\n    };\n    await apiManagerProxy.invoke('toggleUsingPasscode', togglePayload);\n    await apiManagerProxy.serviceMessagePort.invoke('toggleUsingPasscode', togglePayload);\n\n\n    rootScope.dispatchEvent('toggle_using_passcode', true);\n\n    // The session storage should first get encrypted in the mtproto worker, then we can use start using the encrypted proxy here\n    DeferredIsUsingPasscode.resolveDeferred(true);\n    EncryptionKeyStore.save(encryptionKey);\n\n    await enableCacheStorages();\n\n    await AccountController.updateStorageForLegacy(null); // remove access keys from unencrypted local storage\n  }\n\n  async function isMyPasscode(passcode: string) {\n    const passcodeData = await commonStateStorage.get('passcode', false);\n    if(!passcodeData?.verificationHash || !passcodeData?.verificationSalt) return false;\n\n    const hashed = await hashPasscode(passcode, passcodeData.verificationSalt);\n    passcode = ''; // forget\n\n    return compareUint8Arrays(hashed, passcodeData.verificationHash);\n  }\n\n  async function disablePasscode() {\n    rootScope.managers.appStateManager.setByKey(joinDeepPath('settings', 'passcode', 'enabled'), false);\n    rootScope.dispatchEvent('toggle_using_passcode', false);\n\n    await disableCacheStorages();\n    await clearCacheStorages();\n\n    await apiManagerProxy.invoke('toggleUsingPasscode', {isUsingPasscode: false});\n    await apiManagerProxy.serviceMessagePort.invoke('toggleUsingPasscode', {isUsingPasscode: false});\n\n    EncryptionKeyStore.save(null);\n    DeferredIsUsingPasscode.resolveDeferred(false);\n\n    await enableCacheStorages();\n\n    commonStateStorage.delete('passcode');\n  }\n\n  /**\n   * Note: Re-encrypts everything with a different hash even if the passcode is the same\n   */\n  async function changePasscode(passcode: string) {\n    const {verificationHash, verificationSalt, encryptionSalt, encryptionKey} =\n      await createEncryptionArtifactsForPasscode(passcode);\n    passcode = ''; // forget\n\n    const toStore = {\n      verificationHash,\n      verificationSalt,\n      encryptionSalt\n    }\n\n    await disableCacheStorages();\n    await clearCacheStorages();\n\n    await apiManagerProxy.invoke('changePasscode', {\n      toStore,\n      encryptionKey\n    });\n    await apiManagerProxy.serviceMessagePort.invoke('saveEncryptionKey', encryptionKey);\n\n    EncryptionKeyStore.save(encryptionKey);\n\n    await enableCacheStorages();\n    // Just to set local cache, not really needed)\n    await commonStateStorage.set({\n      passcode: toStore\n    }, true);\n  }\n\n  /**\n   * Warning! don't call on an unverified password\n   */\n  async function unlockWithPasscode(passcode: string) {\n    const passcodeData = await commonStateStorage.get('passcode', false);\n    if(!passcodeData?.encryptionSalt) throw new Error('No encryption salt found in storage');\n\n    const encryptionKey = await deriveEncryptionKey(passcode, passcodeData.encryptionSalt);\n    passcode = ''; // forget;\n\n    EncryptionKeyStore.save(encryptionKey);\n    await apiManagerProxy.invoke('saveEncryptionKey', encryptionKey);\n    // Make sure we resolve the DeferredIsUsingPasscode as there is no storage available in SW to get the value\n    await apiManagerProxy.serviceMessagePort.invoke('toggleUsingPasscode', {isUsingPasscode: true, encryptionKey});\n\n    apiManagerProxy.invokeVoid('toggleLockOthers', false);\n    rootScope.dispatchEvent('toggle_locked', false);\n  }\n\n  return {\n    enablePasscode,\n    isMyPasscode,\n    disablePasscode,\n    changePasscode,\n    unlockWithPasscode\n  };\n}\n"],"names":["MAX_PASSCODE_LENGTH","SALT_LENGTH","compareUint8Arrays","arr1","arr2","value","index","ITERATIONS","hashPasscode","passcode","salt","passcodeBytes","importedKey","derivedBits","deriveEncryptionKey","createEncryptionArtifactsForPasscode","encryptionSalt","verificationSalt","encryptionKey","verificationHash","usePasscodeActions","rootScope","apiManagerProxy","useLockScreenHotReloadGuard","disableCacheStorages","CacheStorageController","enableCacheStorages","clearCacheStorages","enablePasscode","commonStateStorage","joinDeepPath","togglePayload","DeferredIsUsingPasscode","EncryptionKeyStore","AccountController","isMyPasscode","passcodeData","hashed","disablePasscode","changePasscode","toStore","unlockWithPasscode"],"mappings":"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"}